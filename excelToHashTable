/*
Name:			Cody Walls
EUID:			cgw0081
Course:			CSCE 2110.002
Date Created:	12/2/2021
Description:	This program holds the flightLegInstance.cpp info 
*/

#include <iostream>
#include <stdlib.h>
#include <list>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <vector>
using namespace std;

class HashT{
	private:
		static const int tableSize = 23;
		struct item{
			//will be making the FLNO the key and the other items the value
			string seq, flno, fDate, actDept, actArr, plane;
			item* next;
		};
		item* HashTable[tableSize];
	public:
		HashT();
		int HashFunction(string seq);
		void addItem(string seq, string flno, string fDate, string actDept, string actArr, string pilot);
		void searchItem(string seq);
		void deleteItem(string seq);
		void printTable();
};
HashT:: HashT(){
	//constructor
	//sets all the values in the struct to null or empty
	for(int i = 0; i < tableSize; i++){
		HashTable[i] = new item;
		HashTable[i]->seq = "empty";
		HashTable[i]->flno = "empty";
		HashTable[i]->fDate = "empty";
		HashTable[i]->actDept = "empty";
		HashTable[i]->actArr = "empty";
		HashTable[i]->plane = "empty";
		HashTable[i]->next = NULL;
	}
}
int HashT:: HashFunction(string seq){
	int hash = 0;
	int index;
	for(int i = 0; i < seq.length(); i++){
		hash = (hash + (int)seq[i]) * 8;
	}
	index = hash % tableSize;
	return index;
}
void HashT:: addItem(string seq, string flno, string fDate, string actDept, string actArr, string plane){
	int index = HashFunction(seq);
	//check if its empty
	if(HashTable[index]->seq == "empty"){
		HashTable[index]->seq = seq;
		HashTable[index]->flno = flno;
		HashTable[index]->fDate = fDate;
		HashTable[index]->actDept = actDept;
		HashTable[index]->actArr = actArr;
		HashTable[index]->plane = plane;
	}
	else{
		item* Ptr = HashTable[index];
		item* newBucket = new item;
		newBucket->seq = seq;
		newBucket->flno = flno;
		newBucket->fDate = fDate;
		newBucket->actDept = actDept;
		newBucket->actArr = actArr;
		newBucket->plane = plane;
		HashTable[index]->next = NULL;
		while(Ptr->next != NULL){
			Ptr = Ptr->next;
		}
		Ptr->next = newBucket;
	}
}
void HashT:: searchItem(string seq){
	int index = HashFunction(seq);
	bool foundSeq = false;
	string flno, fDate, actDept, actArr, plane;
	item* Ptr = HashTable[index];
	while(Ptr != NULL){
		if(Ptr->seq == seq){
			foundSeq = true;
			flno = Ptr->flno;
			fDate = Ptr->fDate;
			actDept = Ptr->actDept;
			actArr = Ptr->actArr;
			plane = Ptr->plane;
		}
		Ptr = Ptr->next;
	}
	if(foundSeq == true){
	cout << seq << "[FLNO] - [" << flno << "] " << "[fDate] - [" << fDate << "] " << "[actDept] - [" << actDept << "] ";
	cout << "[actArr] - [" << actArr << "] " << "[plane] - [" << plane << endl;
	}
	else{
		cout << "No information for [" << seq << "]" << endl;
	}
}
void HashT:: deleteItem(string seq){
	int index = HashFunction(seq);
	item* delPtr;
	if(HashTable[index]->seq == "empty"){
		cout << seq << " is not in this hash table, try another flight" << endl;
	}
	else if(HashTable[index]->seq == seq){
		delPtr = HashTable[index];
		HashTable[index] = HashTable[index]->next;
		delete delPtr;
		cout << "[" << seq << "] has been removed from this hash table" << endl;
	}
}
void HashT:: printTable(){
	for (int i = 0; i < tableSize; i++){
		cout << "Index: " << i << endl;
		cout << HashTable[i]->seq << endl;
		cout << HashTable[i]->flno << endl;
		cout << HashTable[i]->fDate << endl;
		cout << HashTable[i]->actDept << endl;
		cout << HashTable[i]->actArr << endl;
		cout << HashTable[i]->plane << endl;
	}
}
int main(){
	
	HashT hashTable;
	string addedSEQ;
	string addedFLNO;
	string addedFDATE;
	string addedACTDEPT;
	string addedACTARR;
	string addedPLANE;
	int choice;
	string fileName;
	string seq;
	string flno;
	string fdate;
	string actdept;
	string actarr;
	string plane;
	vector<string> SEQV;
	vector<string> FLNOV;
	vector<string> FDATEV;
	vector<string> ACTDEPTV;
	vector<string> ACTARRV;
	vector<string> PLANEV;
	string removedSEQ;
	string searchedSEQ;
	int lines;
	
	fileName = "DATA_FlightLegInstance.CSV";
	ifstream theFile(fileName);
	
	if(theFile.is_open()){
		//this just grabs the first line and then does nothing with it
		//so its removing it
		string line;
		getline(theFile, line);
		//10 lines
		while(!theFile.eof()){
			if(theFile.eof()) break;
			else{
				getline(theFile, seq, ',');
				SEQV.push_back(seq);
				getline(theFile, flno, ',');
				FLNOV.push_back(flno);
				getline(theFile, fdate, ',');
				FDATEV.push_back(fdate);
				getline(theFile, actdept, ',');
				ACTDEPTV.push_back(actdept);
				getline(theFile, actarr, ',');
				ACTARRV.push_back(actarr);
				getline(theFile, plane, '\n');
				PLANEV.push_back(plane);
				lines += 1;
			}
		}
		theFile.close();
	}
	else{
		cout << "unable to open file" << endl;
	}
	/*
	for(int i = 0; i < 14; i++){
		hashTable.addItem(SEQV[i], FLNOV[i], FDATEV[i], ACTDEPTV[i], ACTARRV[i], PLANEV[i]);
	}
	*/
	/*
	do{
		cout << endl;
		cout << "1 - add flight" << endl;
		cout << "2 - remove flight" << endl;
		cout << "3 - search flight" << endl;
		cout << "4 - print table" << endl;
		cout << "5 - exit" << endl;
		cin >> choice;
		
		switch(choice){
			case 1:
				cout << "[ADD FLIGHT]" << endl;
				cin.ignore();
				getline(cin,addedFLNO);
				cout << "[ADD SEQ]" << endl;
				cin.ignore();
				getline(cin,addedSeq);
				cout << "[ADD FROMA]" << endl;
				cin.ignore();
				getline(cin, addedFromA);
				cout << "[ADD TOA]" << endl;
				cin.ignore();
				getline(cin, addedToA);
				cout << "[ADD DEPTTIME]" << endl;
				cin.ignore();
				getline(cin, addedDeptTime);
				cout << "[ADD ARRTIME]" << endl;
				cin.ignore();
				getline(cin, addedArrTime);
				cout << "[ADD PLANE]" << endl;
				cin.ignore();
				getline(cin, addedPlane);
				cout << "Added new flight information" << endl;
				hashTable.addItem(addedFLNO, addedSeq, addedFromA, addedToA, addedDeptTime, addedArrTime, addedPlane);
				break;
			case 2:
				cout << "[REMOVE FLIGHT]" << endl;
				cin.ignore();
				getline(cin, removedFlight);
				cout << "Flight has been removed" << endl;
				hashTable.deleteItem(removedFlight);
				break;
			case 3:
				cout << "[SEARCH FLIGHT]" << endl;
				cin.ignore();
				getline(cin, searchedFlight);
				hashTable.searchItem(searchedFlight);
				break;
			case 4:
				cout << "[PRINT TABLE]" << endl;
				hashTable.printTable();
				break;
			case 5:
				cout << "[EXIT]" << endl;
			default:
				cout << "[INVALID INPUT]" << endl;
				break;
		}
	}while(choice != 5);
	*/
	
	cout << "File Name: sample_data/" << fileName << endl;
	cout << "Insert Content: ['SEQ', 'FLNO', 'FDATE', 'ACTDEPT', 'ACTARR', 'PLANE']" << endl;
	cout << "Seq" << " " << "FLNO" << " " << "fDate" << " " << "actDept" << " " << "actArr" << " " << "Plane" << endl;
	for(int i = 0; i < 14; i++){
		hashTable.addItem(SEQV[i], FLNOV[i], FDATEV[i], ACTDEPTV[i], ACTARRV[i], PLANEV[i]);
		cout << SEQV[i] << " " << FLNOV[i] << " " << FDATEV[i] << " " << ACTDEPTV[i] << " " << ACTARRV[i] << " " << PLANEV[i] << " " << endl;
	}
	
	
	return 0;
}

